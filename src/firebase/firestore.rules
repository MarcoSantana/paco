/* 
 author ü•ã: mSantana 
 directory üìÅ: /paco/src/firebase 
 filename üìÑ: firestore.rules 
 stardate üöÄ: 202207.02-13.25 
 */

 service cloud.firestore {
    match /databases/{database}/documents {
        function authenticated() { return request.auth.uid != null }
        function isOwner(id) { return request.auth.uid == id}
        function isAdmin() { return request.auth.token.admin == true }
        function canUpdateStatus() {
            return (request.resource.data.keys().hasAll(["status"]));
        }

        match /counters/{id} {
            allow read: if isAdmin();
            allow read: if isAdmin(); 
        }

        match /logs {
            allow read: if isAdmin();
            allow read: if isAdmin(); 
        }

        match /events/{id} {
            allow read: if authenticated() || isAdmin();
            allow write: if authenticated() || isAdmin();
        }
        
        match /events/{id}/users {
            allow read: if authenticated() || isAdmin();
            allow write: if authenticated() || isAdmin();
        }

				match /events/{id}/users/{userId} {
            allow read: if authenticated() || isAdmin();
            allow write: if authenticated() || isAdmin();
        }

        match /requests {
            allow read: if authenticated();
            allow write: if authenticated();
        }

        match /requests/{id} {
            allow read: if authenticated();
            allow write: if authenticated();
        }

        match /documents/{documentId} {
            allow read: if authenticated() || isAdmin();
            allow write: if isAdmin() || authenticated();
        }

        match /users/{userId} {
            //allow get: if authenticated() && request.auth.uid == userId;
            //allow create: if authenticated() && request.auth.uid == userId;
            // allow create, read, update, delete: if isOwner(userId);
            //allow read, update, delete: if request.auth != null && request.auth.uid == userId;
            allow read: if authenticated();
            allow write: if authenticated();
            //allow update, delete: if authenticated() && request.auth.uid == userId;
        }
        match /users/{userId}/profile/{documentName=**} {
            // allow read: if true;
            // allow write: if true;
            //allow get: if authenticated() && request.auth.uid == userId;
                    //allow list: if authenticated() && request.auth.uid == userId;
            //allow create: if authenticated() && request.auth.uid == userId;
            //allow update, delete: if authenticated() && request.auth.uid == userId;
            //allow create, read, update, delete: if authenticated() && isOwner(userId);
            allow read: if request.auth.uid == userId;
            allow write: if request.auth.uid == userId;
        }


        match /users/{userId}/profile/license {
            // allow read: if true;
            // allow write: if true;
            //allow get: if authenticated() && request.auth.uid == userId;
                    //allow list: if authenticated() && request.auth.uid == userId;
            //allow create: if authenticated() && request.auth.uid == userId;
            //allow update, delete: if authenticated() && request.auth.uid == userId;
            //allow create, read, update, delete: if authenticated() && isOwner(userId);
            allow read: if request.auth.uid == userId;
            allow write: if request.auth.uid == userId;
        }

        match /profiles {
            allow get: if authenticated() && request.auth.uid == userId;
            allow list: if authenticated() && request.auth.uid == userId;
            allow create: if authenticated() && request.auth.uid == userId;
            allow update, delete: if authenticated() && request.auth.uid == userId;
        }

        match /profiles/{userId} {
            allow get: if authenticated() && request.auth.uid == userId;
            allow list: if authenticated() && request.auth.uid == userId;
            allow create: if authenticated() && request.auth.uid == userId;
            allow update, delete: if authenticated() && request.auth.uid == userId;
        }

        match /profiles/{userId}/{documentName=**} {
            allow get: if authenticated() && request.auth.uid == userId;
            allow list: if authenticated() && request.auth.uid == userId;
            allow create: if authenticated() && request.auth.uid == userId;
            allow update, delete: if authenticated() && request.auth.uid == userId;
        }

        match /users/{userId}/products/{productId} {
            allow get: if authenticated() && request.auth.uid == userId;
            allow list: if authenticated() && request.auth.uid == userId;
            allow create: if authenticated() && request.auth.uid == userId;
            allow update, delete: if authenticated() && request.auth.uid == userId;
        }

        match /users/{userId}/documents/{documentId} {
            allow get: if authenticated() && request.auth.uid == userId;
            allow list: if authenticated() && request.auth.uid == userId;
            allow create: if authenticated() && request.auth.uid == userId;
            allow update, delete: if authenticated() && request.auth.uid == userId;
        }

        match /users/{userId}/events/{eventId} {
            allow get: if isAdmin() || request.auth.uid == userId;
            allow list: if authenticated() && request.auth.uid == userId;
            allow create: if authenticated() && request.auth.uid == userId;
            allow update, delete: if (authenticated() && request.auth.uid == userId) || isAdmin();
        }
                
        match /colleges/{collegeId} {
            allow list: if authenticated();
            allow get: if authenticated();
        }

        match /colleges/{collegeId}/campi/{campusId} {
            allow list: if authenticated();
            allow get: if authenticated();
        }

        match /hospitals/{hospitalId} {
            allow list: if authenticated();
            allow get: if authenticated();
        }

  }
}